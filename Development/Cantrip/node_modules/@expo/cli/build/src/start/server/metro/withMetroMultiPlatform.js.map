{"version":3,"sources":["../../../../../src/start/server/metro/withMetroMultiPlatform.ts"],"sourcesContent":["/**\n * Copyright Â© 2022 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { ExpoConfig, Platform } from '@expo/config';\nimport fs from 'fs';\nimport Bundler from 'metro/src/Bundler';\nimport { ConfigT } from 'metro-config';\nimport { Resolution, ResolutionContext, CustomResolutionContext } from 'metro-resolver';\nimport * as metroResolver from 'metro-resolver';\nimport path from 'path';\nimport resolveFrom from 'resolve-from';\n\nimport { createFastResolver } from './createExpoMetroResolver';\nimport { isNodeExternal, shouldCreateVirtualCanary, shouldCreateVirtualShim } from './externals';\nimport { isFailedToResolveNameError, isFailedToResolvePathError } from './metroErrors';\nimport { getMetroBundlerWithVirtualModules } from './metroVirtualModules';\nimport {\n  withMetroErrorReportingResolver,\n  withMetroMutatedResolverContext,\n  withMetroResolvers,\n} from './withMetroResolvers';\nimport { Log } from '../../../log';\nimport { FileNotifier } from '../../../utils/FileNotifier';\nimport { env } from '../../../utils/env';\nimport { installExitHooks } from '../../../utils/exit';\nimport { isInteractive } from '../../../utils/interactive';\nimport { loadTsConfigPathsAsync, TsConfigPaths } from '../../../utils/tsconfig/loadTsConfigPaths';\nimport { resolveWithTsConfigPaths } from '../../../utils/tsconfig/resolveWithTsConfigPaths';\nimport { isServerEnvironment } from '../middleware/metroOptions';\nimport { PlatformBundlers } from '../platformBundlers';\n\ntype Mutable<T> = { -readonly [K in keyof T]: T[K] };\n\nconst debug = require('debug')('expo:start:server:metro:multi-platform') as typeof console.log;\n\nfunction withWebPolyfills(\n  config: ConfigT,\n  {\n    getMetroBundler,\n  }: {\n    getMetroBundler: () => Bundler;\n  }\n): ConfigT {\n  const originalGetPolyfills = config.serializer.getPolyfills\n    ? config.serializer.getPolyfills.bind(config.serializer)\n    : () => [];\n\n  const getPolyfills = (ctx: { platform: string | null }): readonly string[] => {\n    const virtualModuleId = `\\0polyfill:external-require`;\n\n    const contents = (() => {\n      if (ctx.platform === 'web') {\n        return `global.$$require_external = typeof window === \"undefined\" ? require : () => null;`;\n      } else {\n        // Wrap in try/catch to support Android.\n        return 'try { global.$$require_external = typeof expo === \"undefined\" ? eval(\"require\") : (moduleId) => { throw new Error(`Node.js standard library module ${moduleId} is not available in this JavaScript environment`);} } catch { global.$$require_external = (moduleId) => { throw new Error(`Node.js standard library module ${moduleId} is not available in this JavaScript environment`);} }';\n      }\n    })();\n    getMetroBundlerWithVirtualModules(getMetroBundler()).setVirtualModule(\n      virtualModuleId,\n      contents\n    );\n\n    if (ctx.platform === 'web') {\n      return [virtualModuleId];\n    }\n\n    // Generally uses `rn-get-polyfills`\n    const polyfills = originalGetPolyfills(ctx);\n    return [...polyfills, virtualModuleId];\n  };\n\n  return {\n    ...config,\n    serializer: {\n      ...config.serializer,\n      getPolyfills,\n    },\n  };\n}\n\nfunction normalizeSlashes(p: string) {\n  return p.replace(/\\\\/g, '/');\n}\n\nexport function getNodejsExtensions(srcExts: readonly string[]): string[] {\n  const mjsExts = srcExts.filter((ext) => /mjs$/.test(ext));\n  const nodejsSourceExtensions = srcExts.filter((ext) => !/mjs$/.test(ext));\n  // find index of last `*.js` extension\n  const jsIndex = nodejsSourceExtensions.reduce((index, ext, i) => {\n    return /jsx?$/.test(ext) ? i : index;\n  }, -1);\n\n  // insert `*.mjs` extensions after `*.js` extensions\n  nodejsSourceExtensions.splice(jsIndex + 1, 0, ...mjsExts);\n\n  return nodejsSourceExtensions;\n}\n\n/**\n * Apply custom resolvers to do the following:\n * - Disable `.native.js` extensions on web.\n * - Alias `react-native` to `react-native-web` on web.\n * - Redirect `react-native-web/dist/modules/AssetRegistry/index.js` to `@react-native/assets/registry.js` on web.\n * - Add support for `tsconfig.json`/`jsconfig.json` aliases via `compilerOptions.paths`.\n * - Alias react-native renderer code to a vendored React canary build on native.\n */\nexport function withExtendedResolver(\n  config: ConfigT,\n  {\n    tsconfig,\n    isTsconfigPathsEnabled,\n    isFastResolverEnabled,\n    isExporting,\n    isReactCanaryEnabled,\n    getMetroBundler,\n  }: {\n    tsconfig: TsConfigPaths | null;\n    isTsconfigPathsEnabled?: boolean;\n    isFastResolverEnabled?: boolean;\n    isExporting?: boolean;\n    isReactCanaryEnabled?: boolean;\n    getMetroBundler: () => Bundler;\n  }\n) {\n  if (isFastResolverEnabled) {\n    Log.warn(`Experimental bundling features are enabled.`);\n  }\n  if (isReactCanaryEnabled) {\n    Log.warn(`Experimental React Canary version is enabled.`);\n  }\n\n  // Get the `transformer.assetRegistryPath`\n  // this needs to be unified since you can't dynamically\n  // swap out the transformer based on platform.\n  const assetRegistryPath = fs.realpathSync(\n    path.resolve(resolveFrom(config.projectRoot, '@react-native/assets-registry/registry.js'))\n  );\n\n  const defaultResolver = metroResolver.resolve;\n  const resolver = isFastResolverEnabled\n    ? createFastResolver({\n        preserveSymlinks: config.resolver?.unstable_enableSymlinks ?? true,\n        blockList: Array.isArray(config.resolver?.blockList)\n          ? config.resolver?.blockList\n          : [config.resolver?.blockList],\n      })\n    : defaultResolver;\n\n  const aliases: { [key: string]: Record<string, string> } = {\n    web: {\n      'react-native': 'react-native-web',\n      'react-native/index': 'react-native-web',\n    },\n  };\n\n  const universalAliases: [RegExp, string][] = [];\n\n  // This package is currently always installed as it is included in the `expo` package.\n  if (resolveFrom.silent(config.projectRoot, '@expo/vector-icons')) {\n    debug('Enabling alias: react-native-vector-icons -> @expo/vector-icons');\n    universalAliases.push([/^react-native-vector-icons(\\/.*)?/, '@expo/vector-icons$1']);\n  }\n\n  const preferredMainFields: { [key: string]: string[] } = {\n    // Defaults from Expo Webpack. Most packages using `react-native` don't support web\n    // in the `react-native` field, so we should prefer the `browser` field.\n    // https://github.com/expo/router/issues/37\n    web: ['browser', 'module', 'main'],\n  };\n\n  let tsConfigResolve =\n    isTsconfigPathsEnabled && (tsconfig?.paths || tsconfig?.baseUrl != null)\n      ? resolveWithTsConfigPaths.bind(resolveWithTsConfigPaths, {\n          paths: tsconfig.paths ?? {},\n          baseUrl: tsconfig.baseUrl ?? config.projectRoot,\n          hasBaseUrl: !!tsconfig.baseUrl,\n        })\n      : null;\n\n  // TODO: Move this to be a transform key for invalidation.\n  if (!isExporting && isInteractive()) {\n    if (isTsconfigPathsEnabled) {\n      // TODO: We should track all the files that used imports and invalidate them\n      // currently the user will need to save all the files that use imports to\n      // use the new aliases.\n      const configWatcher = new FileNotifier(config.projectRoot, [\n        './tsconfig.json',\n        './jsconfig.json',\n      ]);\n      configWatcher.startObserving(() => {\n        debug('Reloading tsconfig.json');\n        loadTsConfigPathsAsync(config.projectRoot).then((tsConfigPaths) => {\n          if (tsConfigPaths?.paths && !!Object.keys(tsConfigPaths.paths).length) {\n            debug('Enabling tsconfig.json paths support');\n            tsConfigResolve = resolveWithTsConfigPaths.bind(resolveWithTsConfigPaths, {\n              paths: tsConfigPaths.paths ?? {},\n              baseUrl: tsConfigPaths.baseUrl ?? config.projectRoot,\n              hasBaseUrl: !!tsConfigPaths.baseUrl,\n            });\n          } else {\n            debug('Disabling tsconfig.json paths support');\n            tsConfigResolve = null;\n          }\n        });\n      });\n\n      // TODO: This probably prevents the process from exiting.\n      installExitHooks(() => {\n        configWatcher.stopObserving();\n      });\n    } else {\n      debug('Skipping tsconfig.json paths support');\n    }\n  }\n\n  let nodejsSourceExtensions: string[] | null = null;\n\n  function getStrictResolver(\n    { resolveRequest, ...context }: ResolutionContext,\n    platform: string | null\n  ) {\n    return function doResolve(moduleName: string): Resolution {\n      return resolver(context, moduleName, platform);\n    };\n  }\n\n  function getOptionalResolver(context: ResolutionContext, platform: string | null) {\n    const doResolve = getStrictResolver(context, platform);\n    return function optionalResolve(moduleName: string): Resolution | null {\n      try {\n        return doResolve(moduleName);\n      } catch (error) {\n        // If the error is directly related to a resolver not being able to resolve a module, then\n        // we can ignore the error and try the next resolver. Otherwise, we should throw the error.\n        const isResolutionError =\n          isFailedToResolveNameError(error) || isFailedToResolvePathError(error);\n        if (!isResolutionError) {\n          throw error;\n        }\n      }\n      return null;\n    };\n  }\n\n  const metroConfigWithCustomResolver = withMetroResolvers(config, [\n    // Mock out production react imports in development.\n    (context: ResolutionContext, moduleName: string, platform: string | null) => {\n      // This resolution is dev-only to prevent bundling the production React packages in development.\n      // @ts-expect-error: dev is not on type.\n      if (!context.dev) return null;\n\n      if (\n        // Match react-native renderers.\n        (platform !== 'web' &&\n          context.originModulePath.match(/[\\\\/]node_modules[\\\\/]react-native[\\\\/]/) &&\n          moduleName.match(/([\\\\/]ReactFabric|ReactNativeRenderer)-prod/)) ||\n        // Match react production imports.\n        (moduleName.match(/\\.production(\\.min)?\\.js$/) &&\n          // Match if the import originated from a react package.\n          context.originModulePath.match(/[\\\\/]node_modules[\\\\/](react[-\\\\/]|scheduler[\\\\/])/))\n      ) {\n        debug(`Skipping production module: ${moduleName}`);\n        // /Users/path/to/expo/node_modules/react/index.js ./cjs/react.production.min.js\n        // /Users/path/to/expo/node_modules/react/jsx-dev-runtime.js ./cjs/react-jsx-dev-runtime.production.min.js\n        // /Users/path/to/expo/node_modules/react-is/index.js ./cjs/react-is.production.min.js\n        // /Users/path/to/expo/node_modules/react-refresh/runtime.js ./cjs/react-refresh-runtime.production.min.js\n        // /Users/path/to/expo/node_modules/react-native/node_modules/scheduler/index.native.js ./cjs/scheduler.native.production.min.js\n        // /Users/path/to/expo/node_modules/react-native/node_modules/react-is/index.js ./cjs/react-is.production.min.js\n        return {\n          type: 'empty',\n        };\n      }\n      return null;\n    },\n    // tsconfig paths\n    (context: ResolutionContext, moduleName: string, platform: string | null) => {\n      return (\n        tsConfigResolve?.(\n          {\n            originModulePath: context.originModulePath,\n            moduleName,\n          },\n          getOptionalResolver(context, platform)\n        ) ?? null\n      );\n    },\n\n    // Node.js externals support\n    (context: ResolutionContext, moduleName: string, platform: string | null) => {\n      const isServer =\n        context.customResolverOptions?.environment === 'node' ||\n        context.customResolverOptions?.environment === 'react-server';\n\n      if (platform !== 'web' && !isServer) {\n        // This is a web/server-only feature, we may extend the shimming to native platforms in the future.\n        return null;\n      }\n\n      const moduleId = isNodeExternal(moduleName);\n      if (!moduleId) {\n        return null;\n      }\n\n      if (\n        // In browser runtimes, we want to either resolve a local node module by the same name, or shim the module to\n        // prevent crashing when Node.js built-ins are imported.\n        !isServer\n      ) {\n        // Perform optional resolve first. If the module doesn't exist (no module in the node_modules)\n        // then we can mock the file to use an empty module.\n        const result = getOptionalResolver(context, platform)(moduleName);\n        return (\n          result ?? {\n            // In this case, mock the file to use an empty module.\n            type: 'empty',\n          }\n        );\n      }\n\n      const contents = `module.exports=$$require_external('node:${moduleId}');`;\n      debug(`Virtualizing Node.js \"${moduleId}\"`);\n      const virtualModuleId = `\\0node:${moduleId}`;\n      getMetroBundlerWithVirtualModules(getMetroBundler()).setVirtualModule(\n        virtualModuleId,\n        contents\n      );\n      return {\n        type: 'sourceFile',\n        filePath: virtualModuleId,\n      };\n    },\n\n    // Basic moduleId aliases\n    (context: ResolutionContext, moduleName: string, platform: string | null) => {\n      // Conditionally remap `react-native` to `react-native-web` on web in\n      // a way that doesn't require Babel to resolve the alias.\n      if (platform && platform in aliases && aliases[platform][moduleName]) {\n        const redirectedModuleName = aliases[platform][moduleName];\n        return getStrictResolver(context, platform)(redirectedModuleName);\n      }\n\n      for (const [matcher, alias] of universalAliases) {\n        const match = moduleName.match(matcher);\n        if (match) {\n          const aliasedModule = alias.replace(\n            /\\$(\\d+)/g,\n            (_, index) => match[parseInt(index, 10)] ?? ''\n          );\n          const doResolve = getStrictResolver(context, platform);\n          debug(`Alias \"${moduleName}\" to \"${aliasedModule}\"`);\n          return doResolve(aliasedModule);\n        }\n      }\n\n      return null;\n    },\n\n    // HACK(EvanBacon):\n    // React Native uses `event-target-shim` incorrectly and this causes the native runtime\n    // to fail to load. This is a temporary workaround until we can fix this upstream.\n    // https://github.com/facebook/react-native/pull/38628\n    (context: ResolutionContext, moduleName: string, platform: string | null) => {\n      if (platform !== 'web' && moduleName === 'event-target-shim') {\n        debug('For event-target-shim to use js:', context.originModulePath);\n        const doResolve = getStrictResolver(context, platform);\n        return doResolve('event-target-shim/dist/event-target-shim.js');\n      }\n\n      return null;\n    },\n\n    // TODO: Reduce these as much as possible in the future.\n    // Complex post-resolution rewrites.\n    (context: ResolutionContext, moduleName: string, platform: string | null) => {\n      const doResolve = getStrictResolver(context, platform);\n\n      const result = doResolve(moduleName);\n\n      if (result.type !== 'sourceFile') {\n        return result;\n      }\n\n      if (platform === 'web') {\n        // Replace the web resolver with the original one.\n        // This is basically an alias for web-only.\n        // TODO: Drop this in favor of the standalone asset registry module.\n        if (shouldAliasAssetRegistryForWeb(platform, result)) {\n          // @ts-expect-error: `readonly` for some reason.\n          result.filePath = assetRegistryPath;\n        }\n\n        if (platform === 'web' && result.filePath.includes('node_modules')) {\n          // Replace with static shims\n\n          const normalName = normalizeSlashes(result.filePath)\n            // Drop everything up until the `node_modules` folder.\n            .replace(/.*node_modules\\//, '');\n\n          const shimFile = shouldCreateVirtualShim(normalName);\n          if (shimFile) {\n            const virtualId = `\\0shim:${normalName}`;\n            const bundler = getMetroBundlerWithVirtualModules(getMetroBundler());\n            if (!bundler.hasVirtualModule(virtualId)) {\n              bundler.setVirtualModule(virtualId, fs.readFileSync(shimFile, 'utf8'));\n            }\n            debug(`Redirecting module \"${result.filePath}\" to shim`);\n\n            return {\n              ...result,\n              filePath: virtualId,\n            };\n          }\n        }\n      } else {\n        // When server components are enabled, redirect React Native's renderer to the canary build\n        // this will enable the use hook and other requisite features from React 19.\n        if (isReactCanaryEnabled && result.filePath.includes('node_modules')) {\n          const normalName = normalizeSlashes(result.filePath)\n            // Drop everything up until the `node_modules` folder.\n            .replace(/.*node_modules\\//, '');\n\n          const canaryFile = shouldCreateVirtualCanary(normalName);\n          if (canaryFile) {\n            debug(`Redirecting React Native module \"${result.filePath}\" to canary build`);\n            return {\n              ...result,\n              filePath: canaryFile,\n            };\n          }\n        }\n      }\n\n      return result;\n    },\n  ]);\n\n  // Ensure we mutate the resolution context to include the custom resolver options for server and web.\n  const metroConfigWithCustomContext = withMetroMutatedResolverContext(\n    metroConfigWithCustomResolver,\n    (\n      immutableContext: CustomResolutionContext,\n      moduleName: string,\n      platform: string | null\n    ): CustomResolutionContext => {\n      const context: Mutable<CustomResolutionContext> = {\n        ...immutableContext,\n        preferNativePlatform: platform !== 'web',\n      };\n\n      if (isServerEnvironment(context.customResolverOptions?.environment)) {\n        // Adjust nodejs source extensions to sort mjs after js, including platform variants.\n        if (nodejsSourceExtensions === null) {\n          nodejsSourceExtensions = getNodejsExtensions(context.sourceExts);\n        }\n        context.sourceExts = nodejsSourceExtensions;\n\n        context.unstable_enablePackageExports = true;\n        context.unstable_conditionsByPlatform = {};\n        // Node.js runtimes should only be importing main at the moment.\n        // This is a temporary fix until we can support the package.json exports.\n        context.mainFields = ['main', 'module'];\n\n        // Enable react-server import conditions.\n        if (context.customResolverOptions?.environment === 'react-server') {\n          context.unstable_conditionNames = ['node', 'require', 'react-server', 'workerd'];\n        } else {\n          context.unstable_conditionNames = ['node', 'require'];\n        }\n      } else {\n        // Non-server changes\n\n        if (!env.EXPO_METRO_NO_MAIN_FIELD_OVERRIDE && platform && platform in preferredMainFields) {\n          context.mainFields = preferredMainFields[platform];\n        }\n      }\n\n      return context;\n    }\n  );\n\n  return withMetroErrorReportingResolver(metroConfigWithCustomContext);\n}\n\n/** @returns `true` if the incoming resolution should be swapped on web. */\nexport function shouldAliasAssetRegistryForWeb(\n  platform: string | null,\n  result: Resolution\n): boolean {\n  return (\n    platform === 'web' &&\n    result?.type === 'sourceFile' &&\n    typeof result?.filePath === 'string' &&\n    normalizeSlashes(result.filePath).endsWith(\n      'react-native-web/dist/modules/AssetRegistry/index.js'\n    )\n  );\n}\n/** @returns `true` if the incoming resolution should be swapped. */\nexport function shouldAliasModule(\n  input: {\n    platform: string | null;\n    result: Resolution;\n  },\n  alias: { platform: string; output: string }\n): boolean {\n  return (\n    input.platform === alias.platform &&\n    input.result?.type === 'sourceFile' &&\n    typeof input.result?.filePath === 'string' &&\n    normalizeSlashes(input.result.filePath).endsWith(alias.output)\n  );\n}\n\n/** Add support for `react-native-web` and the Web platform. */\nexport async function withMetroMultiPlatformAsync(\n  projectRoot: string,\n  {\n    config,\n    exp,\n    platformBundlers,\n    isTsconfigPathsEnabled,\n    webOutput,\n    isFastResolverEnabled,\n    isExporting,\n    isReactCanaryEnabled,\n    getMetroBundler,\n  }: {\n    config: ConfigT;\n    exp: ExpoConfig;\n    isTsconfigPathsEnabled: boolean;\n    platformBundlers: PlatformBundlers;\n    webOutput?: 'single' | 'static' | 'server';\n    isFastResolverEnabled?: boolean;\n    isExporting?: boolean;\n    isReactCanaryEnabled: boolean;\n    getMetroBundler: () => Bundler;\n  }\n) {\n  if (!config.projectRoot) {\n    // @ts-expect-error: read-only types\n    config.projectRoot = projectRoot;\n  }\n\n  // Required for @expo/metro-runtime to format paths in the web LogBox.\n  process.env.EXPO_PUBLIC_PROJECT_ROOT = process.env.EXPO_PUBLIC_PROJECT_ROOT ?? projectRoot;\n\n  if (['static', 'server'].includes(webOutput ?? '')) {\n    // Enable static rendering in runtime space.\n    process.env.EXPO_PUBLIC_USE_STATIC = '1';\n  }\n\n  // This is used for running Expo CLI in development against projects outside the monorepo.\n  if (!isDirectoryIn(__dirname, projectRoot)) {\n    if (!config.watchFolders) {\n      // @ts-expect-error: watchFolders is readonly\n      config.watchFolders = [];\n    }\n    // @ts-expect-error: watchFolders is readonly\n    config.watchFolders.push(path.join(require.resolve('metro-runtime/package.json'), '../..'));\n  }\n\n  // @ts-expect-error\n  config.transformer._expoRouterWebRendering = webOutput;\n  // @ts-expect-error: Invalidate the cache when the location of expo-router changes on-disk.\n  config.transformer._expoRouterPath = resolveFrom.silent(projectRoot, 'expo-router');\n\n  let tsconfig: null | TsConfigPaths = null;\n\n  if (isTsconfigPathsEnabled) {\n    tsconfig = await loadTsConfigPathsAsync(projectRoot);\n  }\n\n  let expoConfigPlatforms = Object.entries(platformBundlers)\n    .filter(\n      ([platform, bundler]) => bundler === 'metro' && exp.platforms?.includes(platform as Platform)\n    )\n    .map(([platform]) => platform);\n\n  if (Array.isArray(config.resolver.platforms)) {\n    expoConfigPlatforms = [...new Set(expoConfigPlatforms.concat(config.resolver.platforms))];\n  }\n\n  // @ts-expect-error: typed as `readonly`.\n  config.resolver.platforms = expoConfigPlatforms;\n\n  config = withWebPolyfills(config, { getMetroBundler });\n\n  return withExtendedResolver(config, {\n    tsconfig,\n    isExporting,\n    isTsconfigPathsEnabled,\n    isFastResolverEnabled,\n    isReactCanaryEnabled,\n    getMetroBundler,\n  });\n}\n\nfunction isDirectoryIn(targetPath: string, rootPath: string) {\n  return targetPath.startsWith(rootPath) && targetPath.length >= rootPath.length;\n}\n"],"names":["getNodejsExtensions","withExtendedResolver","shouldAliasAssetRegistryForWeb","shouldAliasModule","withMetroMultiPlatformAsync","debug","require","withWebPolyfills","config","getMetroBundler","originalGetPolyfills","serializer","getPolyfills","bind","ctx","virtualModuleId","contents","platform","getMetroBundlerWithVirtualModules","setVirtualModule","polyfills","normalizeSlashes","p","replace","srcExts","mjsExts","filter","ext","test","nodejsSourceExtensions","jsIndex","reduce","index","i","splice","tsconfig","isTsconfigPathsEnabled","isFastResolverEnabled","isExporting","isReactCanaryEnabled","Log","warn","assetRegistryPath","fs","realpathSync","path","resolve","resolveFrom","projectRoot","defaultResolver","metroResolver","resolver","createFastResolver","preserveSymlinks","unstable_enableSymlinks","blockList","Array","isArray","aliases","web","universalAliases","silent","push","preferredMainFields","tsConfigResolve","paths","baseUrl","resolveWithTsConfigPaths","hasBaseUrl","isInteractive","configWatcher","FileNotifier","startObserving","loadTsConfigPathsAsync","then","tsConfigPaths","Object","keys","length","installExitHooks","stopObserving","getStrictResolver","resolveRequest","context","doResolve","moduleName","getOptionalResolver","optionalResolve","error","isResolutionError","isFailedToResolveNameError","isFailedToResolvePathError","metroConfigWithCustomResolver","withMetroResolvers","dev","originModulePath","match","type","isServer","customResolverOptions","environment","moduleId","isNodeExternal","result","filePath","redirectedModuleName","matcher","alias","aliasedModule","_","parseInt","includes","normalName","shimFile","shouldCreateVirtualShim","virtualId","bundler","hasVirtualModule","readFileSync","canaryFile","shouldCreateVirtualCanary","metroConfigWithCustomContext","withMetroMutatedResolverContext","immutableContext","preferNativePlatform","isServerEnvironment","sourceExts","unstable_enablePackageExports","unstable_conditionsByPlatform","mainFields","unstable_conditionNames","env","EXPO_METRO_NO_MAIN_FIELD_OVERRIDE","withMetroErrorReportingResolver","endsWith","input","output","exp","platformBundlers","webOutput","process","EXPO_PUBLIC_PROJECT_ROOT","EXPO_PUBLIC_USE_STATIC","isDirectoryIn","__dirname","watchFolders","join","transformer","_expoRouterWebRendering","_expoRouterPath","expoConfigPlatforms","entries","platforms","map","Set","concat","targetPath","rootPath","startsWith"],"mappings":"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"}