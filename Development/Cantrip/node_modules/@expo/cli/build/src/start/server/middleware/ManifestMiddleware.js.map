{"version":3,"sources":["../../../../../src/start/server/middleware/ManifestMiddleware.ts"],"sourcesContent":["import {\n  ExpoConfig,\n  ExpoGoConfig,\n  getConfig,\n  PackageJSONConfig,\n  ProjectConfig,\n} from '@expo/config';\nimport { resolveEntryPoint } from '@expo/config/paths';\nimport findWorkspaceRoot from 'find-yarn-workspace-root';\nimport path from 'path';\nimport { resolve } from 'url';\n\nimport { ExpoMiddleware } from './ExpoMiddleware';\nimport {\n  shouldEnableAsyncImports,\n  createBundleUrlPath,\n  getBaseUrlFromExpoConfig,\n  getAsyncRoutesFromExpoConfig,\n  createBundleUrlPathFromExpoConfig,\n} from './metroOptions';\nimport { resolveGoogleServicesFile, resolveManifestAssets } from './resolveAssets';\nimport { parsePlatformHeader, RuntimePlatform } from './resolvePlatform';\nimport { ServerHeaders, ServerNext, ServerRequest, ServerResponse } from './server.types';\nimport { isEnableHermesManaged } from '../../../export/exportHermes';\nimport * as Log from '../../../log';\nimport { env } from '../../../utils/env';\nimport { CommandError } from '../../../utils/errors';\nimport { stripExtension } from '../../../utils/url';\nimport * as ProjectDevices from '../../project/devices';\nimport { UrlCreator } from '../UrlCreator';\nimport { getRouterDirectoryModuleIdWithManifest } from '../metro/router';\nimport { getPlatformBundlers, PlatformBundlers } from '../platformBundlers';\nimport { createTemplateHtmlFromExpoConfigAsync } from '../webTemplate';\n\nconst debug = require('debug')('expo:start:server:middleware:manifest') as typeof console.log;\n\n/** Wraps `findWorkspaceRoot` and guards against having an empty `package.json` file in an upper directory. */\nexport function getWorkspaceRoot(projectRoot: string): string | null {\n  try {\n    return findWorkspaceRoot(projectRoot);\n  } catch (error: any) {\n    if (error.message.includes('Unexpected end of JSON input')) {\n      return null;\n    }\n    throw error;\n  }\n}\n\nconst supportedPlatforms = ['ios', 'android', 'web', 'none'];\n\nexport function getEntryWithServerRoot(\n  projectRoot: string,\n  props: { platform: string; pkg?: PackageJSONConfig }\n) {\n  if (!supportedPlatforms.includes(props.platform)) {\n    throw new CommandError(\n      `Failed to resolve the project's entry file: The platform \"${props.platform}\" is not supported.`\n    );\n  }\n  return path.relative(getMetroServerRoot(projectRoot), resolveEntryPoint(projectRoot, props));\n}\n\nexport function getMetroServerRoot(projectRoot: string) {\n  if (env.EXPO_USE_METRO_WORKSPACE_ROOT) {\n    return getWorkspaceRoot(projectRoot) ?? projectRoot;\n  }\n\n  return projectRoot;\n}\n\n/** Get the main entry module ID (file) relative to the project root. */\nexport function resolveMainModuleName(\n  projectRoot: string,\n  props: { platform: string; pkg?: PackageJSONConfig }\n): string {\n  const entryPoint = getEntryWithServerRoot(projectRoot, props);\n\n  debug(`Resolved entry point: ${entryPoint} (project root: ${projectRoot})`);\n\n  return stripExtension(entryPoint, 'js');\n}\n\n/** Info about the computer hosting the dev server. */\nexport interface HostInfo {\n  host: string;\n  server: 'expo';\n  serverVersion: string;\n  serverDriver: string | null;\n  serverOS: NodeJS.Platform;\n  serverOSVersion: string;\n}\n\n/** Parsed values from the supported request headers. */\nexport interface ManifestRequestInfo {\n  /** Platform to serve. */\n  platform: RuntimePlatform;\n  /** Requested host name. */\n  hostname?: string | null;\n  /** The protocol used to request the manifest */\n  protocol?: 'http' | 'https';\n}\n\n/** Project related info. */\nexport type ResponseProjectSettings = {\n  expoGoConfig: ExpoGoConfig;\n  hostUri: string;\n  bundleUrl: string;\n  exp: ExpoConfig;\n};\n\nexport const DEVELOPER_TOOL = 'expo-cli';\n\nexport type ManifestMiddlewareOptions = {\n  /** Should start the dev servers in development mode (minify). */\n  mode?: 'development' | 'production';\n  /** Should instruct the bundler to create minified bundles. */\n  minify?: boolean;\n  constructUrl: UrlCreator['constructUrl'];\n  isNativeWebpack?: boolean;\n  privateKeyPath?: string;\n};\n\n/** Base middleware creator for serving the Expo manifest (like the index.html but for native runtimes). */\nexport abstract class ManifestMiddleware<\n  TManifestRequestInfo extends ManifestRequestInfo,\n> extends ExpoMiddleware {\n  private initialProjectConfig: ProjectConfig;\n  private platformBundlers: PlatformBundlers;\n\n  constructor(\n    protected projectRoot: string,\n    protected options: ManifestMiddlewareOptions\n  ) {\n    super(\n      projectRoot,\n      /**\n       * Only support `/`, `/manifest`, `/index.exp` for the manifest middleware.\n       */\n      ['/', '/manifest', '/index.exp']\n    );\n    this.initialProjectConfig = getConfig(projectRoot);\n    this.platformBundlers = getPlatformBundlers(projectRoot, this.initialProjectConfig.exp);\n  }\n\n  /** Exposed for testing. */\n  public async _resolveProjectSettingsAsync({\n    platform,\n    hostname,\n    protocol,\n  }: Pick<\n    TManifestRequestInfo,\n    'hostname' | 'platform' | 'protocol'\n  >): Promise<ResponseProjectSettings> {\n    // Read the config\n    const projectConfig = getConfig(this.projectRoot);\n\n    // Read from headers\n    const mainModuleName = this.resolveMainModuleName({\n      pkg: projectConfig.pkg,\n      platform,\n    });\n\n    const isHermesEnabled = isEnableHermesManaged(projectConfig.exp, platform);\n\n    // Create the manifest and set fields within it\n    const expoGoConfig = this.getExpoGoConfig({\n      mainModuleName,\n      hostname,\n    });\n\n    const hostUri = this.options.constructUrl({ scheme: '', hostname });\n\n    const bundleUrl = this._getBundleUrl({\n      platform,\n      mainModuleName,\n      hostname,\n      engine: isHermesEnabled ? 'hermes' : undefined,\n      baseUrl: getBaseUrlFromExpoConfig(projectConfig.exp),\n      asyncRoutes: getAsyncRoutesFromExpoConfig(\n        projectConfig.exp,\n        this.options.mode ?? 'development',\n        platform\n      ),\n      routerRoot: getRouterDirectoryModuleIdWithManifest(this.projectRoot, projectConfig.exp),\n      protocol,\n    });\n\n    // Resolve all assets and set them on the manifest as URLs\n    await this.mutateManifestWithAssetsAsync(projectConfig.exp, bundleUrl);\n\n    return {\n      expoGoConfig,\n      hostUri,\n      bundleUrl,\n      exp: projectConfig.exp,\n    };\n  }\n\n  /** Get the main entry module ID (file) relative to the project root. */\n  private resolveMainModuleName(props: { pkg: PackageJSONConfig; platform: string }): string {\n    let entryPoint = getEntryWithServerRoot(this.projectRoot, props);\n\n    debug(`Resolved entry point: ${entryPoint} (project root: ${this.projectRoot})`);\n\n    // NOTE(Bacon): Webpack is currently hardcoded to index.bundle on native\n    // in the future (TODO) we should move this logic into a Webpack plugin and use\n    // a generated file name like we do on web.\n    // const server = getDefaultDevServer();\n    // // TODO: Move this into BundlerDevServer and read this info from self.\n    // const isNativeWebpack = server instanceof WebpackBundlerDevServer && server.isTargetingNative();\n    if (this.options.isNativeWebpack) {\n      entryPoint = 'index.js';\n    }\n\n    return stripExtension(entryPoint, 'js');\n  }\n\n  /** Parse request headers into options. */\n  public abstract getParsedHeaders(req: ServerRequest): TManifestRequestInfo;\n\n  /** Store device IDs that were sent in the request headers. */\n  private async saveDevicesAsync(req: ServerRequest) {\n    const deviceIds = req.headers?.['expo-dev-client-id'];\n    if (deviceIds) {\n      await ProjectDevices.saveDevicesAsync(this.projectRoot, deviceIds).catch((e) =>\n        Log.exception(e)\n      );\n    }\n  }\n\n  /** Create the bundle URL (points to the single JS entry file). Exposed for testing. */\n  public _getBundleUrl({\n    platform,\n    mainModuleName,\n    hostname,\n    engine,\n    baseUrl,\n    isExporting,\n    asyncRoutes,\n    routerRoot,\n    protocol,\n  }: {\n    platform: string;\n    hostname?: string | null;\n    mainModuleName: string;\n    engine?: 'hermes';\n    baseUrl?: string;\n    asyncRoutes: boolean;\n    isExporting?: boolean;\n    routerRoot: string;\n    protocol?: 'http' | 'https';\n  }): string {\n    const path = createBundleUrlPath({\n      mode: this.options.mode ?? 'development',\n      minify: this.options.minify,\n      platform,\n      mainModuleName,\n      lazy: shouldEnableAsyncImports(this.projectRoot),\n      engine,\n      bytecode: engine === 'hermes',\n      baseUrl,\n      isExporting: !!isExporting,\n      asyncRoutes,\n      routerRoot,\n    });\n\n    return (\n      this.options.constructUrl({\n        scheme: protocol ?? 'http',\n        // hostType: this.options.location.hostType,\n        hostname,\n      }) + path\n    );\n  }\n\n  /** Log telemetry. */\n  protected abstract trackManifest(version?: string): void;\n\n  /** Get the manifest response to return to the runtime. This file contains info regarding where the assets can be loaded from. Exposed for testing. */\n  public abstract _getManifestResponseAsync(options: TManifestRequestInfo): Promise<{\n    body: string;\n    version: string;\n    headers: ServerHeaders;\n  }>;\n\n  private getExpoGoConfig({\n    mainModuleName,\n    hostname,\n  }: {\n    mainModuleName: string;\n    hostname?: string | null;\n  }): ExpoGoConfig {\n    return {\n      // localhost:8081\n      debuggerHost: this.options.constructUrl({ scheme: '', hostname }),\n      // Required for Expo Go to function.\n      developer: {\n        tool: DEVELOPER_TOOL,\n        projectRoot: this.projectRoot,\n      },\n      packagerOpts: {\n        // Required for dev client.\n        dev: this.options.mode !== 'production',\n      },\n      // Indicates the name of the main bundle.\n      mainModuleName,\n      // Add this string to make Flipper register React Native / Metro as \"running\".\n      // Can be tested by running:\n      // `METRO_SERVER_PORT=8081 open -a flipper.app`\n      // Where 8081 is the port where the Expo project is being hosted.\n      __flipperHack: 'React Native packager is running',\n    };\n  }\n\n  /** Resolve all assets and set them on the manifest as URLs */\n  private async mutateManifestWithAssetsAsync(manifest: ExpoConfig, bundleUrl: string) {\n    await resolveManifestAssets(this.projectRoot, {\n      manifest,\n      resolver: async (path) => {\n        if (this.options.isNativeWebpack) {\n          // When using our custom dev server, just do assets normally\n          // without the `assets/` subpath redirect.\n          return resolve(bundleUrl!.match(/^https?:\\/\\/.*?\\//)![0], path);\n        }\n        return bundleUrl!.match(/^https?:\\/\\/.*?\\//)![0] + 'assets/' + path;\n      },\n    });\n    // The server normally inserts this but if we're offline we'll do it here\n    await resolveGoogleServicesFile(this.projectRoot, manifest);\n  }\n\n  public getWebBundleUrl() {\n    const platform = 'web';\n    // Read from headers\n    const mainModuleName = this.resolveMainModuleName({\n      pkg: this.initialProjectConfig.pkg,\n      platform,\n    });\n\n    return createBundleUrlPathFromExpoConfig(this.projectRoot, this.initialProjectConfig.exp, {\n      platform,\n      mainModuleName,\n      minify: this.options.minify,\n      lazy: shouldEnableAsyncImports(this.projectRoot),\n      mode: this.options.mode ?? 'development',\n      // Hermes doesn't support more modern JS features than most, if not all, modern browser.\n      engine: 'hermes',\n      isExporting: false,\n      bytecode: false,\n    });\n  }\n\n  /**\n   * Web platforms should create an index.html response using the same script resolution as native.\n   *\n   * Instead of adding a `bundleUrl` to a `manifest.json` (native) we'll add a `<script src=\"\">`\n   * to an `index.html`, this enables the web platform to load JavaScript from the server.\n   */\n  private async handleWebRequestAsync(req: ServerRequest, res: ServerResponse) {\n    // Read from headers\n    const bundleUrl = this.getWebBundleUrl();\n\n    res.setHeader('Content-Type', 'text/html');\n\n    res.end(\n      await createTemplateHtmlFromExpoConfigAsync(this.projectRoot, {\n        exp: this.initialProjectConfig.exp,\n        scripts: [bundleUrl],\n      })\n    );\n  }\n\n  /** Exposed for testing. */\n  async checkBrowserRequestAsync(req: ServerRequest, res: ServerResponse, next: ServerNext) {\n    if (\n      this.platformBundlers.web === 'metro' &&\n      this.initialProjectConfig.exp.platforms?.includes('web')\n    ) {\n      // NOTE(EvanBacon): This effectively disables the safety check we do on custom runtimes to ensure\n      // the `expo-platform` header is included. When `web.bundler=web`, if the user has non-standard Expo\n      // code loading then they'll get a web bundle without a clear assertion of platform support.\n      const platform = parsePlatformHeader(req);\n      // On web, serve the public folder\n      if (!platform || platform === 'web') {\n        if (['static', 'server'].includes(this.initialProjectConfig.exp.web?.output ?? '')) {\n          // Skip the spa-styled index.html when static generation is enabled.\n          next();\n          return true;\n        } else {\n          await this.handleWebRequestAsync(req, res);\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  async handleRequestAsync(\n    req: ServerRequest,\n    res: ServerResponse,\n    next: ServerNext\n  ): Promise<void> {\n    // First check for standard JavaScript runtimes (aka legacy browsers like Chrome).\n    if (await this.checkBrowserRequestAsync(req, res, next)) {\n      return;\n    }\n\n    // Save device IDs for dev client.\n    await this.saveDevicesAsync(req);\n\n    // Read from headers\n    const options = this.getParsedHeaders(req);\n    const { body, version, headers } = await this._getManifestResponseAsync(options);\n    for (const [headerName, headerValue] of headers) {\n      res.setHeader(headerName, headerValue);\n    }\n    res.end(body);\n\n    // Log analytics\n    this.trackManifest(version ?? null);\n  }\n}\n"],"names":["getWorkspaceRoot","getEntryWithServerRoot","getMetroServerRoot","resolveMainModuleName","DEVELOPER_TOOL","ManifestMiddleware","debug","require","projectRoot","findWorkspaceRoot","error","message","includes","supportedPlatforms","props","platform","CommandError","path","relative","resolveEntryPoint","env","EXPO_USE_METRO_WORKSPACE_ROOT","entryPoint","stripExtension","ExpoMiddleware","constructor","options","initialProjectConfig","getConfig","platformBundlers","getPlatformBundlers","exp","_resolveProjectSettingsAsync","hostname","protocol","projectConfig","mainModuleName","pkg","isHermesEnabled","isEnableHermesManaged","expoGoConfig","getExpoGoConfig","hostUri","constructUrl","scheme","bundleUrl","_getBundleUrl","engine","undefined","baseUrl","getBaseUrlFromExpoConfig","asyncRoutes","getAsyncRoutesFromExpoConfig","mode","routerRoot","getRouterDirectoryModuleIdWithManifest","mutateManifestWithAssetsAsync","isNativeWebpack","saveDevicesAsync","req","deviceIds","headers","ProjectDevices","catch","e","Log","exception","isExporting","createBundleUrlPath","minify","lazy","shouldEnableAsyncImports","bytecode","debuggerHost","developer","tool","packagerOpts","dev","__flipperHack","manifest","resolveManifestAssets","resolver","resolve","match","resolveGoogleServicesFile","getWebBundleUrl","createBundleUrlPathFromExpoConfig","handleWebRequestAsync","res","setHeader","end","createTemplateHtmlFromExpoConfigAsync","scripts","checkBrowserRequestAsync","next","web","platforms","parsePlatformHeader","output","handleRequestAsync","getParsedHeaders","body","version","_getManifestResponseAsync","headerName","headerValue","trackManifest"],"mappings":"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"}