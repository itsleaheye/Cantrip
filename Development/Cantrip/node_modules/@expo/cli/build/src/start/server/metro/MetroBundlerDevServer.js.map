{"version":3,"sources":["../../../../../src/start/server/metro/MetroBundlerDevServer.ts"],"sourcesContent":["/**\n * Copyright Â© 2022 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { getConfig } from '@expo/config';\nimport * as runtimeEnv from '@expo/env';\nimport { SerialAsset } from '@expo/metro-config/build/serializer/serializerAssets';\nimport assert from 'assert';\nimport chalk from 'chalk';\nimport { AssetData } from 'metro';\nimport fetch from 'node-fetch';\nimport path from 'path';\n\nimport { createRouteHandlerMiddleware } from './createServerRouteMiddleware';\nimport { ExpoRouterServerManifestV1, fetchManifest } from './fetchRouterManifest';\nimport { instantiateMetroAsync } from './instantiateMetro';\nimport { getErrorOverlayHtmlAsync, logMetroErrorAsync } from './metroErrorInterface';\nimport { metroWatchTypeScriptFiles } from './metroWatchTypeScriptFiles';\nimport {\n  getRouterDirectoryModuleIdWithManifest,\n  hasWarnedAboutApiRoutes,\n  isApiRouteConvention,\n  warnInvalidWebOutput,\n} from './router';\nimport { serializeHtmlWithAssets } from './serializeHtml';\nimport { observeAnyFileChanges, observeFileChanges } from './waitForMetroToObserveTypeScriptFile';\nimport { ExportAssetMap } from '../../../export/saveAssets';\nimport { Log } from '../../../log';\nimport getDevClientProperties from '../../../utils/analytics/getDevClientProperties';\nimport { env } from '../../../utils/env';\nimport { CommandError } from '../../../utils/errors';\nimport { getFreePortAsync } from '../../../utils/port';\nimport { logEventAsync } from '../../../utils/telemetry';\nimport { BundlerDevServer, BundlerStartOptions, DevServerInstance } from '../BundlerDevServer';\nimport {\n  evalMetroNoHandling,\n  getStaticRenderFunctionsForEntry,\n  requireFileContentsWithMetro,\n} from '../getStaticRenderFunctions';\nimport { ContextModuleSourceMapsMiddleware } from '../middleware/ContextModuleSourceMapsMiddleware';\nimport { CreateFileMiddleware } from '../middleware/CreateFileMiddleware';\nimport { DevToolsPluginMiddleware } from '../middleware/DevToolsPluginMiddleware';\nimport { FaviconMiddleware } from '../middleware/FaviconMiddleware';\nimport { HistoryFallbackMiddleware } from '../middleware/HistoryFallbackMiddleware';\nimport { InterstitialPageMiddleware } from '../middleware/InterstitialPageMiddleware';\nimport { resolveMainModuleName } from '../middleware/ManifestMiddleware';\nimport { ReactDevToolsPageMiddleware } from '../middleware/ReactDevToolsPageMiddleware';\nimport {\n  DeepLinkHandler,\n  RuntimeRedirectMiddleware,\n} from '../middleware/RuntimeRedirectMiddleware';\nimport { ServeStaticMiddleware } from '../middleware/ServeStaticMiddleware';\nimport {\n  ExpoMetroOptions,\n  createBundleUrlPath,\n  getAsyncRoutesFromExpoConfig,\n  getBaseUrlFromExpoConfig,\n  shouldEnableAsyncImports,\n} from '../middleware/metroOptions';\nimport { prependMiddleware } from '../middleware/mutations';\nimport { startTypescriptTypeGenerationAsync } from '../type-generation/startTypescriptTypeGeneration';\n\nexport type ExpoRouterRuntimeManifest = Awaited<\n  ReturnType<typeof import('expo-router/build/static/renderStaticContent').getManifest>\n>;\n\nexport class ForwardHtmlError extends CommandError {\n  constructor(\n    message: string,\n    public html: string,\n    public statusCode: number\n  ) {\n    super(message);\n  }\n}\n\nconst debug = require('debug')('expo:start:server:metro') as typeof console.log;\n\n/** Default port to use for apps running in Expo Go. */\nconst EXPO_GO_METRO_PORT = 8081;\n\n/** Default port to use for apps that run in standard React Native projects or Expo Dev Clients. */\nconst DEV_CLIENT_METRO_PORT = 8081;\n\nexport class MetroBundlerDevServer extends BundlerDevServer {\n  private metro: import('metro').Server | null = null;\n\n  get name(): string {\n    return 'metro';\n  }\n\n  async resolvePortAsync(options: Partial<BundlerStartOptions> = {}): Promise<number> {\n    const port =\n      // If the manually defined port is busy then an error should be thrown...\n      options.port ??\n      // Otherwise use the default port based on the runtime target.\n      (options.devClient\n        ? // Don't check if the port is busy if we're using the dev client since most clients are hardcoded to 8081.\n          Number(process.env.RCT_METRO_PORT) || DEV_CLIENT_METRO_PORT\n        : // Otherwise (running in Expo Go) use a free port that falls back on the classic 8081 port.\n          await getFreePortAsync(EXPO_GO_METRO_PORT));\n\n    return port;\n  }\n\n  async exportExpoRouterApiRoutesAsync({\n    includeSourceMaps,\n    outputDir,\n    prerenderManifest,\n  }: {\n    includeSourceMaps?: boolean;\n    outputDir: string;\n    // This does not contain the API routes info.\n    prerenderManifest: ExpoRouterServerManifestV1;\n  }): Promise<{ files: ExportAssetMap; manifest: ExpoRouterServerManifestV1<string> }> {\n    const { routerRoot } = this.instanceMetroOptions;\n    assert(\n      routerRoot != null,\n      'The server must be started before calling exportExpoRouterApiRoutesAsync.'\n    );\n\n    const appDir = path.join(this.projectRoot, routerRoot);\n    const manifest = await this.getExpoRouterRoutesManifestAsync({ appDir });\n\n    const files: ExportAssetMap = new Map();\n\n    for (const route of manifest.apiRoutes) {\n      const filepath = path.join(appDir, route.file);\n      const contents = await this.bundleApiRoute(filepath);\n      const artifactFilename = path.join(\n        outputDir,\n        path.relative(appDir, filepath.replace(/\\.[tj]sx?$/, '.js'))\n      );\n      if (contents) {\n        let src = contents.src;\n        if (includeSourceMaps && contents.map) {\n          // TODO(kitten): Merge the source map transformer in the future\n          // https://github.com/expo/expo/blob/0dffdb15/packages/%40expo/metro-config/src/serializer/serializeChunks.ts#L422-L439\n          // Alternatively, check whether `sourcesRoot` helps here\n          const artifactBasename = encodeURIComponent(path.basename(artifactFilename) + '.map');\n          src = src.replace(\n            /\\/\\/# sourceMappingURL=.*/g,\n            `//# sourceMappingURL=${artifactBasename}`\n          );\n          files.set(artifactFilename + '.map', {\n            contents: JSON.stringify({\n              version: contents.map.version,\n              sources: contents.map.sources.map((source: string) => {\n                source =\n                  typeof source === 'string' && source.startsWith(this.projectRoot)\n                    ? path.relative(this.projectRoot, source)\n                    : source;\n                return source.split(path.sep).join('/');\n              }),\n              sourcesContent: new Array(contents.map.sources.length).fill(null),\n              names: contents.map.names,\n              mappings: contents.map.mappings,\n            }),\n            targetDomain: 'server',\n          });\n        }\n        files.set(artifactFilename, {\n          contents: src,\n          targetDomain: 'server',\n        });\n      }\n      // Remap the manifest files to represent the output files.\n      route.file = artifactFilename;\n    }\n\n    return {\n      manifest: {\n        ...manifest,\n        htmlRoutes: prerenderManifest.htmlRoutes,\n      },\n      files,\n    };\n  }\n\n  async getExpoRouterRoutesManifestAsync({ appDir }: { appDir: string }) {\n    // getBuiltTimeServerManifest\n    const { exp } = getConfig(this.projectRoot);\n    const manifest = await fetchManifest(this.projectRoot, {\n      ...exp.extra?.router?.platformRoutes,\n      asJson: true,\n      appDir,\n    });\n\n    if (!manifest) {\n      throw new CommandError(\n        'EXPO_ROUTER_SERVER_MANIFEST',\n        'Unexpected error: server manifest could not be fetched.'\n      );\n    }\n\n    return manifest;\n  }\n\n  async getStaticRenderFunctionAsync(): Promise<{\n    serverManifest: ExpoRouterServerManifestV1;\n    manifest: ExpoRouterRuntimeManifest;\n    renderAsync: (path: string) => Promise<string>;\n  }> {\n    const { mode, minify, isExporting } = this.instanceMetroOptions;\n    assert(\n      mode != null && isExporting != null,\n      'The server must be started before calling ssrLoadModule.'\n    );\n\n    const url = this.getDevServerUrl()!;\n\n    const { getStaticContent, getManifest, getBuildTimeServerManifestAsync } =\n      await this.ssrLoadModule<typeof import('expo-router/build/static/renderStaticContent')>(\n        'expo-router/node/render.js',\n        {\n          minify,\n          mode,\n          isExporting,\n        }\n      );\n\n    const { exp } = getConfig(this.projectRoot);\n\n    return {\n      serverManifest: await getBuildTimeServerManifestAsync(),\n      // Get routes from Expo Router.\n      manifest: await getManifest({ preserveApiRoutes: false, ...exp.extra?.router }),\n      // Get route generating function\n      async renderAsync(path: string) {\n        return await getStaticContent(new URL(path, url));\n      },\n    };\n  }\n\n  async getStaticResourcesAsync({\n    includeSourceMaps,\n    mainModuleName,\n  }: {\n    includeSourceMaps?: boolean;\n    mainModuleName?: string;\n  } = {}): Promise<{ artifacts: SerialAsset[]; assets?: AssetData[] }> {\n    const { mode, minify, isExporting, baseUrl, routerRoot, asyncRoutes } =\n      this.instanceMetroOptions;\n    assert(\n      mode != null &&\n        isExporting != null &&\n        baseUrl != null &&\n        routerRoot != null &&\n        asyncRoutes != null,\n      'The server must be started before calling getStaticPageAsync.'\n    );\n\n    const platform = 'web';\n\n    const devBundleUrlPathname = createBundleUrlPath({\n      splitChunks: isExporting && !env.EXPO_NO_BUNDLE_SPLITTING,\n      platform,\n      mode,\n      minify,\n      environment: 'client',\n      serializerOutput: 'static',\n      serializerIncludeMaps: includeSourceMaps,\n      mainModuleName: mainModuleName ?? resolveMainModuleName(this.projectRoot, { platform }),\n      lazy: shouldEnableAsyncImports(this.projectRoot),\n      asyncRoutes,\n      baseUrl,\n      isExporting,\n      routerRoot,\n      bytecode: false,\n    });\n\n    const bundleUrl = new URL(devBundleUrlPathname, this.getDevServerUrl()!);\n\n    // Fetch the generated HTML from our custom Metro serializer\n    const results = await fetch(bundleUrl.toString());\n\n    const txt = await results.text();\n\n    let data: any;\n    try {\n      data = JSON.parse(txt);\n    } catch (error: any) {\n      debug(txt);\n\n      // Metro can throw this error when the initial module id cannot be resolved.\n      if (!results.ok && txt.startsWith('<!DOCTYPE html>')) {\n        throw new ForwardHtmlError(\n          `Metro failed to bundle the project. Check the console for more information.`,\n          txt,\n          results.status\n        );\n      }\n\n      Log.error(\n        'Failed to generate resources with Metro, the Metro config may not be using the correct serializer. Ensure the metro.config.js is extending the expo/metro-config and is not overriding the serializer.'\n      );\n      throw error;\n    }\n\n    // NOTE: This could potentially need more validation in the future.\n    if ('artifacts' in data && Array.isArray(data.artifacts)) {\n      return data;\n    }\n\n    if (data != null && (data.errors || data.type?.match(/.*Error$/))) {\n      // {\n      //   type: 'InternalError',\n      //   errors: [],\n      //   message: 'Metro has encountered an error: While trying to resolve module `stylis` from file `/Users/evanbacon/Documents/GitHub/lab/emotion-error-test/node_modules/@emotion/cache/dist/emotion-cache.browser.esm.js`, the package `/Users/evanbacon/Documents/GitHub/lab/emotion-error-test/node_modules/stylis/package.json` was successfully found. However, this package itself specifies a `main` module field that could not be resolved (`/Users/evanbacon/Documents/GitHub/lab/emotion-error-test/node_modules/stylis/dist/stylis.mjs`. Indeed, none of these files exist:\\n' +\n      //     '\\n' +\n      //     '  * /Users/evanbacon/Documents/GitHub/lab/emotion-error-test/node_modules/stylis/dist/stylis.mjs(.web.ts|.ts|.web.tsx|.tsx|.web.js|.js|.web.jsx|.jsx|.web.json|.json|.web.cjs|.cjs|.web.scss|.scss|.web.sass|.sass|.web.css|.css)\\n' +\n      //     '  * /Users/evanbacon/Documents/GitHub/lab/emotion-error-test/node_modules/stylis/dist/stylis.mjs/index(.web.ts|.ts|.web.tsx|.tsx|.web.js|.js|.web.jsx|.jsx|.web.json|.json|.web.cjs|.cjs|.web.scss|.scss|.web.sass|.sass|.web.css|.css): /Users/evanbacon/Documents/GitHub/lab/emotion-error-test/node_modules/metro/src/node-haste/DependencyGraph.js (289:17)\\n' +\n      //     '\\n' +\n      //     '\\x1B[0m \\x1B[90m 287 |\\x1B[39m         }\\x1B[0m\\n' +\n      //     '\\x1B[0m \\x1B[90m 288 |\\x1B[39m         \\x1B[36mif\\x1B[39m (error \\x1B[36minstanceof\\x1B[39m \\x1B[33mInvalidPackageError\\x1B[39m) {\\x1B[0m\\n' +\n      //     '\\x1B[0m\\x1B[31m\\x1B[1m>\\x1B[22m\\x1B[39m\\x1B[90m 289 |\\x1B[39m           \\x1B[36mthrow\\x1B[39m \\x1B[36mnew\\x1B[39m \\x1B[33mPackageResolutionError\\x1B[39m({\\x1B[0m\\n' +\n      //     '\\x1B[0m \\x1B[90m     |\\x1B[39m                 \\x1B[31m\\x1B[1m^\\x1B[22m\\x1B[39m\\x1B[0m\\n' +\n      //     '\\x1B[0m \\x1B[90m 290 |\\x1B[39m             packageError\\x1B[33m:\\x1B[39m error\\x1B[33m,\\x1B[39m\\x1B[0m\\n' +\n      //     '\\x1B[0m \\x1B[90m 291 |\\x1B[39m             originModulePath\\x1B[33m:\\x1B[39m \\x1B[36mfrom\\x1B[39m\\x1B[33m,\\x1B[39m\\x1B[0m\\n' +\n      //     '\\x1B[0m \\x1B[90m 292 |\\x1B[39m             targetModuleName\\x1B[33m:\\x1B[39m to\\x1B[33m,\\x1B[39m\\x1B[0m'\n      // }\n      // The Metro logger already showed this error.\n      throw new Error(data.message);\n    }\n\n    throw new Error(\n      'Invalid resources returned from the Metro serializer. Expected array, found: ' + data\n    );\n  }\n\n  private async getStaticPageAsync(pathname: string) {\n    const { mode, isExporting, baseUrl, routerRoot, asyncRoutes } = this.instanceMetroOptions;\n    assert(\n      mode != null &&\n        isExporting != null &&\n        baseUrl != null &&\n        routerRoot != null &&\n        asyncRoutes != null,\n      'The server must be started before calling getStaticPageAsync.'\n    );\n    const platform = 'web';\n\n    const devBundleUrlPathname = createBundleUrlPath({\n      splitChunks: isExporting && !env.EXPO_NO_BUNDLE_SPLITTING,\n      platform,\n      mode,\n      environment: 'client',\n      mainModuleName: resolveMainModuleName(this.projectRoot, { platform }),\n      lazy: shouldEnableAsyncImports(this.projectRoot),\n      baseUrl,\n      isExporting,\n      asyncRoutes,\n      routerRoot,\n      bytecode: false,\n    });\n\n    const bundleStaticHtml = async (): Promise<string> => {\n      const { getStaticContent } = await this.ssrLoadModule<\n        typeof import('expo-router/build/static/renderStaticContent')\n      >('expo-router/node/render.js', {\n        minify: false,\n        mode,\n        isExporting,\n        platform,\n      });\n\n      const location = new URL(pathname, this.getDevServerUrl()!);\n      return await getStaticContent(location);\n    };\n\n    const [{ artifacts: resources }, staticHtml] = await Promise.all([\n      this.getStaticResourcesAsync(),\n      bundleStaticHtml(),\n    ]);\n    const content = serializeHtmlWithAssets({\n      isExporting,\n      resources,\n      template: staticHtml,\n      devBundleUrl: devBundleUrlPathname,\n      baseUrl,\n    });\n    return {\n      content,\n      resources,\n    };\n  }\n\n  // Set when the server is started.\n  private instanceMetroOptions: Partial<ExpoMetroOptions> = {};\n\n  async ssrLoadModule<T extends Record<string, any>>(\n    filePath: string,\n    specificOptions: Partial<ExpoMetroOptions> = {}\n  ): Promise<T> {\n    const { baseUrl, routerRoot, isExporting } = this.instanceMetroOptions;\n    assert(\n      baseUrl != null && routerRoot != null && isExporting != null,\n      'The server must be started before calling ssrLoadModule.'\n    );\n\n    return (\n      await getStaticRenderFunctionsForEntry<T>(\n        this.projectRoot,\n        this.getDevServerUrl()!,\n        {\n          // Bundle in Node.js mode for SSR.\n          environment: 'node',\n          platform: 'web',\n          mode: 'development',\n          bytecode: false,\n\n          ...this.instanceMetroOptions,\n          baseUrl,\n          routerRoot,\n          isExporting,\n          ...specificOptions,\n        },\n        filePath\n      )\n    ).fn;\n  }\n\n  async ssrLoadModuleContents(\n    filePath: string,\n    specificOptions: Partial<ExpoMetroOptions> = {}\n  ): Promise<{ src: string; filename: string }> {\n    const { baseUrl, routerRoot, isExporting } = this.instanceMetroOptions;\n    assert(\n      baseUrl != null && routerRoot != null && isExporting != null,\n      'The server must be started before calling ssrLoadModule.'\n    );\n\n    return await requireFileContentsWithMetro(this.projectRoot, this.getDevServerUrl()!, filePath, {\n      // Bundle in Node.js mode for SSR.\n      environment: 'node',\n      platform: 'web',\n      mode: 'development',\n      bytecode: false,\n\n      ...this.instanceMetroOptions,\n      baseUrl,\n      routerRoot,\n      isExporting,\n      ...specificOptions,\n    });\n  }\n\n  async watchEnvironmentVariables() {\n    if (!this.instance) {\n      throw new Error(\n        'Cannot observe environment variable changes without a running Metro instance.'\n      );\n    }\n    if (!this.metro) {\n      // This can happen when the run command is used and the server is already running in another\n      // process.\n      debug('Skipping Environment Variable observation because Metro is not running (headless).');\n      return;\n    }\n\n    const envFiles = runtimeEnv\n      .getFiles(process.env.NODE_ENV)\n      .map((fileName) => path.join(this.projectRoot, fileName));\n\n    observeFileChanges(\n      {\n        metro: this.metro,\n        server: this.instance.server,\n      },\n      envFiles,\n      () => {\n        debug('Reloading environment variables...');\n        // Force reload the environment variables.\n        runtimeEnv.load(this.projectRoot, { force: true });\n      }\n    );\n  }\n\n  getExpoLineOptions() {\n    return this.instanceMetroOptions;\n  }\n\n  protected async startImplementationAsync(\n    options: BundlerStartOptions\n  ): Promise<DevServerInstance> {\n    options.port = await this.resolvePortAsync(options);\n    this.urlCreator = this.getUrlCreator(options);\n\n    const config = getConfig(this.projectRoot, { skipSDKVersionRequirement: true });\n    const { exp } = config;\n    const useServerRendering = ['static', 'server'].includes(exp.web?.output ?? '');\n    const baseUrl = getBaseUrlFromExpoConfig(exp);\n    const asyncRoutes = getAsyncRoutesFromExpoConfig(exp, options.mode ?? 'development', 'web');\n    const routerRoot = getRouterDirectoryModuleIdWithManifest(this.projectRoot, exp);\n    const appDir = path.join(this.projectRoot, routerRoot);\n    const mode = options.mode ?? 'development';\n\n    this.instanceMetroOptions = {\n      isExporting: !!options.isExporting,\n      baseUrl,\n      mode,\n      routerRoot,\n      minify: options.minify,\n      asyncRoutes,\n      // Options that are changing between platforms like engine, platform, and environment aren't set here.\n    };\n\n    const parsedOptions = {\n      port: options.port,\n      maxWorkers: options.maxWorkers,\n      resetCache: options.resetDevServer,\n    };\n\n    // Required for symbolication:\n    process.env.EXPO_DEV_SERVER_ORIGIN = `http://localhost:${options.port}`;\n\n    const { metro, server, middleware, messageSocket } = await instantiateMetroAsync(\n      this,\n      parsedOptions,\n      {\n        isExporting: !!options.isExporting,\n      }\n    );\n\n    const manifestMiddleware = await this.getManifestMiddlewareAsync(options);\n\n    // Important that we noop source maps for context modules as soon as possible.\n    prependMiddleware(middleware, new ContextModuleSourceMapsMiddleware().getHandler());\n\n    // We need the manifest handler to be the first middleware to run so our\n    // routes take precedence over static files. For example, the manifest is\n    // served from '/' and if the user has an index.html file in their project\n    // then the manifest handler will never run, the static middleware will run\n    // and serve index.html instead of the manifest.\n    // https://github.com/expo/expo/issues/13114\n    prependMiddleware(middleware, manifestMiddleware.getHandler());\n\n    middleware.use(\n      new InterstitialPageMiddleware(this.projectRoot, {\n        // TODO: Prevent this from becoming stale.\n        scheme: options.location.scheme ?? null,\n      }).getHandler()\n    );\n    middleware.use(new ReactDevToolsPageMiddleware(this.projectRoot).getHandler());\n    middleware.use(\n      new DevToolsPluginMiddleware(this.projectRoot, this.devToolsPluginManager).getHandler()\n    );\n\n    const deepLinkMiddleware = new RuntimeRedirectMiddleware(this.projectRoot, {\n      onDeepLink: getDeepLinkHandler(this.projectRoot),\n      getLocation: ({ runtime }) => {\n        if (runtime === 'custom') {\n          return this.urlCreator?.constructDevClientUrl();\n        } else {\n          return this.urlCreator?.constructUrl({\n            scheme: 'exp',\n          });\n        }\n      },\n    });\n    middleware.use(deepLinkMiddleware.getHandler());\n\n    middleware.use(new CreateFileMiddleware(this.projectRoot).getHandler());\n\n    // Append support for redirecting unhandled requests to the index.html page on web.\n    if (this.isTargetingWeb()) {\n      // This MUST be after the manifest middleware so it doesn't have a chance to serve the template `public/index.html`.\n      middleware.use(new ServeStaticMiddleware(this.projectRoot).getHandler());\n\n      // This should come after the static middleware so it doesn't serve the favicon from `public/favicon.ico`.\n      middleware.use(new FaviconMiddleware(this.projectRoot).getHandler());\n\n      if (useServerRendering) {\n        middleware.use(\n          createRouteHandlerMiddleware(this.projectRoot, {\n            appDir,\n            routerRoot,\n            config,\n            ...config.exp.extra?.router,\n            bundleApiRoute: (functionFilePath) => this.ssrImportApiRoute(functionFilePath),\n            getStaticPageAsync: (pathname) => {\n              return this.getStaticPageAsync(pathname);\n            },\n          })\n        );\n\n        observeAnyFileChanges(\n          {\n            metro,\n            server,\n          },\n          (events) => {\n            if (exp.web?.output === 'server') {\n              // NOTE(EvanBacon): We aren't sure what files the API routes are using so we'll just invalidate\n              // aggressively to ensure we always have the latest. The only caching we really get here is for\n              // cases where the user is making subsequent requests to the same API route without changing anything.\n              // This is useful for testing but pretty suboptimal. Luckily our caching is pretty aggressive so it makes\n              // up for a lot of the overhead.\n              this.invalidateApiRouteCache();\n            } else if (!hasWarnedAboutApiRoutes()) {\n              for (const event of events) {\n                if (\n                  // If the user did not delete a file that matches the Expo Router API Route convention, then we should warn that\n                  // API Routes are not enabled in the project.\n                  event.metadata?.type !== 'd' &&\n                  // Ensure the file is in the project's routes directory to prevent false positives in monorepos.\n                  event.filePath.startsWith(appDir) &&\n                  isApiRouteConvention(event.filePath)\n                ) {\n                  warnInvalidWebOutput();\n                }\n              }\n            }\n          }\n        );\n      } else {\n        // This MUST run last since it's the fallback.\n        middleware.use(\n          new HistoryFallbackMiddleware(manifestMiddleware.getHandler().internal).getHandler()\n        );\n      }\n    }\n    // Extend the close method to ensure that we clean up the local info.\n    const originalClose = server.close.bind(server);\n\n    server.close = (callback?: (err?: Error) => void) => {\n      return originalClose((err?: Error) => {\n        this.instance = null;\n        this.metro = null;\n        callback?.(err);\n      });\n    };\n\n    this.metro = metro;\n    return {\n      server,\n      location: {\n        // The port is the main thing we want to send back.\n        port: options.port,\n        // localhost isn't always correct.\n        host: 'localhost',\n        // http is the only supported protocol on native.\n        url: `http://localhost:${options.port}`,\n        protocol: 'http',\n      },\n      middleware,\n      messageSocket,\n    };\n  }\n\n  public async waitForTypeScriptAsync(): Promise<boolean> {\n    if (!this.instance) {\n      throw new Error('Cannot wait for TypeScript without a running server.');\n    }\n\n    return new Promise<boolean>((resolve) => {\n      if (!this.metro) {\n        // This can happen when the run command is used and the server is already running in another\n        // process. In this case we can't wait for the TypeScript check to complete because we don't\n        // have access to the Metro server.\n        debug('Skipping TypeScript check because Metro is not running (headless).');\n        return resolve(false);\n      }\n\n      const off = metroWatchTypeScriptFiles({\n        projectRoot: this.projectRoot,\n        server: this.instance!.server,\n        metro: this.metro,\n        tsconfig: true,\n        throttle: true,\n        eventTypes: ['change', 'add'],\n        callback: async () => {\n          // Run once, this prevents the TypeScript project prerequisite from running on every file change.\n          off();\n          const { TypeScriptProjectPrerequisite } = await import(\n            '../../doctor/typescript/TypeScriptProjectPrerequisite.js'\n          );\n\n          try {\n            const req = new TypeScriptProjectPrerequisite(this.projectRoot);\n            await req.bootstrapAsync();\n            resolve(true);\n          } catch (error: any) {\n            // Ensure the process doesn't fail if the TypeScript check fails.\n            // This could happen during the install.\n            Log.log();\n            Log.error(\n              chalk.red`Failed to automatically setup TypeScript for your project. Try restarting the dev server to fix.`\n            );\n            Log.exception(error);\n            resolve(false);\n          }\n        },\n      });\n    });\n  }\n\n  public async startTypeScriptServices() {\n    return startTypescriptTypeGenerationAsync({\n      server: this.instance?.server,\n      metro: this.metro,\n      projectRoot: this.projectRoot,\n    });\n  }\n\n  protected getConfigModuleIds(): string[] {\n    return ['./metro.config.js', './metro.config.json', './rn-cli.config.js'];\n  }\n\n  private pendingRouteOperations = new Map<\n    string,\n    Promise<{ src: string; filename: string; map?: any } | null>\n  >();\n\n  // API Routes\n\n  // Bundle the API Route with Metro and return the string contents to be evaluated in the server.\n  private async bundleApiRoute(\n    filePath: string\n  ): Promise<{ src: string; filename: string; map?: any } | null | undefined> {\n    if (this.pendingRouteOperations.has(filePath)) {\n      return this.pendingRouteOperations.get(filePath);\n    }\n    const bundleAsync = async () => {\n      try {\n        debug('Bundle API route:', this.instanceMetroOptions.routerRoot, filePath);\n        return await this.ssrLoadModuleContents(filePath);\n      } catch (error: any) {\n        if (error instanceof Error) {\n          await logMetroErrorAsync({ error, projectRoot: this.projectRoot });\n        }\n        throw error;\n      } finally {\n        // pendingRouteOperations.delete(filepath);\n      }\n    };\n    const route = bundleAsync();\n\n    this.pendingRouteOperations.set(filePath, route);\n    return route;\n  }\n\n  private async ssrImportApiRoute(\n    filePath: string\n  ): Promise<null | Record<string, Function> | Response> {\n    // TODO: Cache the evaluated function.\n    try {\n      const apiRoute = await this.bundleApiRoute(filePath);\n\n      if (!apiRoute?.src) {\n        return null;\n      }\n      return evalMetroNoHandling(this.projectRoot, apiRoute.src, apiRoute.filename);\n    } catch (error) {\n      // Format any errors that were thrown in the global scope of the evaluation.\n      if (error instanceof Error) {\n        try {\n          const htmlServerError = await getErrorOverlayHtmlAsync({\n            error,\n            projectRoot: this.projectRoot,\n            routerRoot: this.getExpoLineOptions().routerRoot!,\n          });\n\n          return new Response(htmlServerError, {\n            status: 500,\n            headers: {\n              'Content-Type': 'text/html',\n            },\n          });\n        } catch (internalError) {\n          debug('Failed to generate Metro server error UI for API Route error:', internalError);\n          throw error;\n        }\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  private invalidateApiRouteCache() {\n    this.pendingRouteOperations.clear();\n  }\n}\n\nexport function getDeepLinkHandler(projectRoot: string): DeepLinkHandler {\n  return async ({ runtime }) => {\n    if (runtime === 'expo') return;\n    const { exp } = getConfig(projectRoot);\n    await logEventAsync('dev client start command', {\n      status: 'started',\n      ...getDevClientProperties(projectRoot, exp),\n    });\n  };\n}\n"],"names":["ForwardHtmlError","MetroBundlerDevServer","getDeepLinkHandler","CommandError","constructor","message","html","statusCode","debug","require","EXPO_GO_METRO_PORT","DEV_CLIENT_METRO_PORT","BundlerDevServer","metro","name","resolvePortAsync","options","port","devClient","Number","process","env","RCT_METRO_PORT","getFreePortAsync","exportExpoRouterApiRoutesAsync","includeSourceMaps","outputDir","prerenderManifest","routerRoot","instanceMetroOptions","assert","appDir","path","join","projectRoot","manifest","getExpoRouterRoutesManifestAsync","files","Map","route","apiRoutes","filepath","file","contents","bundleApiRoute","artifactFilename","relative","replace","src","map","artifactBasename","encodeURIComponent","basename","set","JSON","stringify","version","sources","source","startsWith","split","sep","sourcesContent","Array","length","fill","names","mappings","targetDomain","htmlRoutes","exp","getConfig","fetchManifest","extra","router","platformRoutes","asJson","getStaticRenderFunctionAsync","mode","minify","isExporting","url","getDevServerUrl","getStaticContent","getManifest","getBuildTimeServerManifestAsync","ssrLoadModule","serverManifest","preserveApiRoutes","renderAsync","URL","getStaticResourcesAsync","mainModuleName","data","baseUrl","asyncRoutes","platform","devBundleUrlPathname","createBundleUrlPath","splitChunks","EXPO_NO_BUNDLE_SPLITTING","environment","serializerOutput","serializerIncludeMaps","resolveMainModuleName","lazy","shouldEnableAsyncImports","bytecode","bundleUrl","results","fetch","toString","txt","text","parse","error","ok","status","Log","isArray","artifacts","errors","type","match","Error","getStaticPageAsync","pathname","bundleStaticHtml","location","resources","staticHtml","Promise","all","content","serializeHtmlWithAssets","template","devBundleUrl","filePath","specificOptions","getStaticRenderFunctionsForEntry","fn","ssrLoadModuleContents","requireFileContentsWithMetro","watchEnvironmentVariables","instance","envFiles","runtimeEnv","getFiles","NODE_ENV","fileName","observeFileChanges","server","load","force","getExpoLineOptions","startImplementationAsync","urlCreator","getUrlCreator","config","skipSDKVersionRequirement","useServerRendering","includes","web","output","getBaseUrlFromExpoConfig","getAsyncRoutesFromExpoConfig","getRouterDirectoryModuleIdWithManifest","parsedOptions","maxWorkers","resetCache","resetDevServer","EXPO_DEV_SERVER_ORIGIN","middleware","messageSocket","instantiateMetroAsync","manifestMiddleware","getManifestMiddlewareAsync","prependMiddleware","ContextModuleSourceMapsMiddleware","getHandler","use","InterstitialPageMiddleware","scheme","ReactDevToolsPageMiddleware","DevToolsPluginMiddleware","devToolsPluginManager","deepLinkMiddleware","RuntimeRedirectMiddleware","onDeepLink","getLocation","runtime","constructDevClientUrl","constructUrl","CreateFileMiddleware","isTargetingWeb","ServeStaticMiddleware","FaviconMiddleware","createRouteHandlerMiddleware","functionFilePath","ssrImportApiRoute","observeAnyFileChanges","events","invalidateApiRouteCache","hasWarnedAboutApiRoutes","event","metadata","isApiRouteConvention","warnInvalidWebOutput","HistoryFallbackMiddleware","internal","originalClose","close","bind","callback","err","host","protocol","waitForTypeScriptAsync","resolve","off","metroWatchTypeScriptFiles","tsconfig","throttle","eventTypes","TypeScriptProjectPrerequisite","req","bootstrapAsync","log","chalk","red","exception","startTypeScriptServices","startTypescriptTypeGenerationAsync","getConfigModuleIds","pendingRouteOperations","has","get","bundleAsync","logMetroErrorAsync","apiRoute","evalMetroNoHandling","filename","htmlServerError","getErrorOverlayHtmlAsync","Response","headers","internalError","clear","logEventAsync","getDevClientProperties"],"mappings":"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"}