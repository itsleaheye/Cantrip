{"version":3,"sources":["../../../src/export/exportApp.ts"],"sourcesContent":["import { getConfig } from '@expo/config';\nimport chalk from 'chalk';\nimport path from 'path';\n\nimport { createMetadataJson } from './createMetadataJson';\nimport { exportAssetsAsync } from './exportAssets';\nimport { unstable_exportStaticAsync } from './exportStaticAsync';\nimport { getVirtualFaviconAssetsAsync } from './favicon';\nimport { createBundlesAsync } from './fork-bundleAsync';\nimport { getPublicExpoManifestAsync } from './getPublicExpoManifest';\nimport { copyPublicFolderAsync } from './publicFolder';\nimport { Options } from './resolveOptions';\nimport { ExportAssetMap, getFilesFromSerialAssets, persistMetroFilesAsync } from './saveAssets';\nimport { createAssetMap, createSourceMapDebugHtml } from './writeContents';\nimport * as Log from '../log';\nimport { WebSupportProjectPrerequisite } from '../start/doctor/web/WebSupportProjectPrerequisite';\nimport { getRouterDirectoryModuleIdWithManifest } from '../start/server/metro/router';\nimport { serializeHtmlWithAssets } from '../start/server/metro/serializeHtml';\nimport { getBaseUrlFromExpoConfig } from '../start/server/middleware/metroOptions';\nimport { createTemplateHtmlFromExpoConfigAsync } from '../start/server/webTemplate';\nimport { env } from '../utils/env';\nimport { setNodeEnv } from '../utils/nodeEnv';\n\nexport async function exportAppAsync(\n  projectRoot: string,\n  {\n    platforms,\n    outputDir,\n    clear,\n    dev,\n    dumpAssetmap,\n    sourceMaps,\n    minify,\n    bytecode,\n    maxWorkers,\n  }: Pick<\n    Options,\n    | 'dumpAssetmap'\n    | 'sourceMaps'\n    | 'dev'\n    | 'clear'\n    | 'outputDir'\n    | 'platforms'\n    | 'minify'\n    | 'bytecode'\n    | 'maxWorkers'\n  >\n): Promise<void> {\n  setNodeEnv(dev ? 'development' : 'production');\n  require('@expo/env').load(projectRoot);\n\n  const projectConfig = getConfig(projectRoot);\n  const exp = await getPublicExpoManifestAsync(projectRoot, {\n    // Web doesn't require validation.\n    skipValidation: platforms.length === 1 && platforms[0] === 'web',\n  });\n\n  if (platforms.includes('web')) {\n    await new WebSupportProjectPrerequisite(projectRoot).assertAsync();\n  }\n\n  const useServerRendering = ['static', 'server'].includes(exp.web?.output ?? '');\n  const baseUrl = getBaseUrlFromExpoConfig(exp);\n\n  if (!bytecode && (platforms.includes('ios') || platforms.includes('android'))) {\n    Log.warn(\n      `Bytecode makes the app startup faster, disabling bytecode is highly discouraged and should only be used for debugging purposes.`\n    );\n  }\n\n  // Print out logs\n  if (baseUrl) {\n    Log.log();\n    Log.log(chalk.gray`Using (experimental) base path: ${baseUrl}`);\n    // Warn if not using an absolute path.\n    if (!baseUrl.startsWith('/')) {\n      Log.log(\n        chalk.yellow`  Base path does not start with a slash. Requests will not be absolute.`\n      );\n    }\n  }\n\n  const mode = dev ? 'development' : 'production';\n  const publicPath = path.resolve(projectRoot, env.EXPO_PUBLIC_FOLDER);\n  const outputPath = path.resolve(projectRoot, outputDir);\n\n  // NOTE(kitten): The public folder is currently always copied, regardless of targetDomain\n  // split. Hence, there's another separate `copyPublicFolderAsync` call below for `web`\n  await copyPublicFolderAsync(publicPath, outputPath);\n\n  // Run metro bundler and create the JS bundles/source maps.\n  const bundles = await createBundlesAsync(projectRoot, projectConfig, {\n    clear: !!clear,\n    minify,\n    bytecode,\n    sourcemaps: sourceMaps,\n    platforms: useServerRendering ? platforms.filter((platform) => platform !== 'web') : platforms,\n    dev,\n    maxWorkers,\n  });\n\n  // Write the JS bundles to disk, and get the bundle file names (this could change with async chunk loading support).\n\n  const files: ExportAssetMap = new Map();\n\n  Object.values(bundles).forEach((bundle) => {\n    getFilesFromSerialAssets(bundle.artifacts, {\n      includeSourceMaps: sourceMaps,\n      files,\n    });\n  });\n\n  const bundleEntries = Object.entries(bundles);\n  // Can be empty during web-only SSG.\n  if (bundleEntries.length) {\n    // TODO: Use same asset system across platforms again.\n    const { assets, embeddedHashSet } = await exportAssetsAsync(projectRoot, {\n      files,\n      exp,\n      outputDir: outputPath,\n      bundles,\n      baseUrl,\n    });\n\n    if (dumpAssetmap) {\n      Log.log('Creating asset map');\n      files.set('assetmap.json', { contents: JSON.stringify(createAssetMap({ assets })) });\n    }\n\n    const fileNames = Object.fromEntries(\n      Object.entries(bundles).map(([platform, bundle]) => [\n        platform,\n        bundle.artifacts.filter((asset) => asset.type === 'js').map((asset) => asset.filename),\n      ])\n    );\n\n    // build source maps\n    if (sourceMaps) {\n      Log.log('Preparing additional debugging files');\n      // If we output source maps, then add a debug HTML file which the user can open in\n      // the web browser to inspect the output like web.\n      files.set('debug.html', {\n        contents: createSourceMapDebugHtml({\n          fileNames: Object.values(fileNames).flat(),\n        }),\n      });\n    }\n\n    // Generate a `metadata.json` for EAS Update.\n    const contents = createMetadataJson({\n      bundles,\n      fileNames,\n      embeddedHashSet,\n    });\n    files.set('metadata.json', { contents: JSON.stringify(contents) });\n  }\n\n  // Additional web-only steps...\n\n  if (platforms.includes('web')) {\n    if (useServerRendering) {\n      const exportServer = exp.web?.output === 'server';\n\n      if (exportServer) {\n        // TODO: Remove when this is abstracted into the files map\n        await copyPublicFolderAsync(publicPath, path.resolve(outputPath, 'client'));\n      }\n\n      await unstable_exportStaticAsync(projectRoot, {\n        mode,\n        files,\n        clear: !!clear,\n        outputDir: outputPath,\n        minify,\n        baseUrl,\n        includeSourceMaps: sourceMaps,\n        routerRoot: getRouterDirectoryModuleIdWithManifest(projectRoot, exp),\n        exportServer,\n        maxWorkers,\n        isExporting: true,\n      });\n    } else {\n      // TODO: Unify with exportStaticAsync\n      // TODO: Maybe move to the serializer.\n      let html = await serializeHtmlWithAssets({\n        isExporting: true,\n        resources: bundles.web!.artifacts,\n        template: await createTemplateHtmlFromExpoConfigAsync(projectRoot, {\n          scripts: [],\n          cssLinks: [],\n        }),\n        baseUrl,\n      });\n\n      // Add the favicon assets to the HTML.\n      const modifyHtml = await getVirtualFaviconAssetsAsync(projectRoot, {\n        outputDir,\n        baseUrl,\n        files,\n      });\n      if (modifyHtml) {\n        html = modifyHtml(html);\n      }\n\n      // Generate SPA-styled HTML file.\n      // If web exists, then write the template HTML file.\n      files.set('index.html', {\n        contents: html,\n        targetDomain: 'client',\n      });\n    }\n  }\n\n  // Write all files at the end for unified logging.\n  await persistMetroFilesAsync(files, outputPath);\n}\n"],"names":["exportAppAsync","projectRoot","platforms","outputDir","clear","dev","dumpAssetmap","sourceMaps","minify","bytecode","maxWorkers","exp","setNodeEnv","require","load","projectConfig","getConfig","getPublicExpoManifestAsync","skipValidation","length","includes","WebSupportProjectPrerequisite","assertAsync","useServerRendering","web","output","baseUrl","getBaseUrlFromExpoConfig","Log","warn","log","chalk","gray","startsWith","yellow","mode","publicPath","path","resolve","env","EXPO_PUBLIC_FOLDER","outputPath","copyPublicFolderAsync","bundles","createBundlesAsync","sourcemaps","filter","platform","files","Map","Object","values","forEach","bundle","getFilesFromSerialAssets","artifacts","includeSourceMaps","bundleEntries","entries","assets","embeddedHashSet","exportAssetsAsync","set","contents","JSON","stringify","createAssetMap","fileNames","fromEntries","map","asset","type","filename","createSourceMapDebugHtml","flat","createMetadataJson","exportServer","unstable_exportStaticAsync","routerRoot","getRouterDirectoryModuleIdWithManifest","isExporting","html","serializeHtmlWithAssets","resources","template","createTemplateHtmlFromExpoConfigAsync","scripts","cssLinks","modifyHtml","getVirtualFaviconAssetsAsync","targetDomain","persistMetroFilesAsync"],"mappings":"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"}